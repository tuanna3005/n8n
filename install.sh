#!/bin/bash

# Ki·ªÉm tra quy·ªÅn root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå This script must be run with root privileges"
   exit 1
fi

# Nh·∫≠p domain
read -p "Enter your domain (e.g. auto.example.com): " DOMAIN

# Ki·ªÉm tra domain ƒë√£ tr·ªè ƒë√∫ng ch∆∞a
check_domain() {
    local domain=$1
    local server_ip=$(curl -s https://api.ipify.org)
    local domain_ip=$(dig +short $domain | tail -n1)

    if [ "$domain_ip" = "$server_ip" ]; then
        return 0
    else
        return 1
    fi
}

# C√†i dig n·∫øu ch∆∞a c√≥
if ! command -v dig &> /dev/null; then
  apt update && apt install -y dnsutils
fi

# Ki·ªÉm tra domain
if check_domain $DOMAIN; then
  echo "‚úÖ Domain $DOMAIN ƒë√£ tr·ªè ƒë√∫ng IP. Ti·∫øp t·ª•c c√†i ƒë·∫∑t..."
else
  echo "‚ùå Domain $DOMAIN ch∆∞a tr·ªè v·ªÅ VPS. H√£y tr·ªè v·ªÅ IP: $(curl -s https://api.ipify.org)"
  exit 1
fi

# C√†i Docker
apt update
apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release

install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
> /etc/apt/sources.list.d/docker.list

apt update
apt install -y docker-ce docker-ce-cli containerd.io docker-compose

# T·∫°o th∆∞ m·ª•c & cd v√†o
N8N_DIR="/home/n8n"
mkdir -p "$N8N_DIR"
cd "$N8N_DIR" || exit 1

# T·∫°o file .env
cat << EOF > .env
N8N_PROTOCOL=https
N8N_HOST=$DOMAIN
WEBHOOK_URL=https://$DOMAIN
WEBHOOK_TUNNEL_URL=https://$DOMAIN
N8N_DEFAULT_BINARY_DATA_MODE=filesystem
EOF

# T·∫°o docker-compose.yml
cat << EOF > docker-compose.yml
version: "3"
services:
  n8n:
    image: n8nio/n8n
    restart: always
    env_file:
      - .env
    ports:
      - "5678:5678"
    volumes:
      - ./files:/home/node/.n8n
    networks:
      - n8n_network

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - n8n
    networks:
      - n8n_network

networks:
  n8n_network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
EOF

# T·∫°o Caddyfile
cat << EOF > Caddyfile
$DOMAIN {
    reverse_proxy n8n:5678
    encode gzip
    log
}
EOF

# C·∫•p quy·ªÅn & ch·∫°y
mkdir -p ./files
chown -R 1000:1000 ./files
docker-compose up -d

# Ho√†n t·∫•t
echo ""
echo "üéâ N8n ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!"
echo "üåê Truy c·∫≠p: https://$DOMAIN"
echo "üõ† C·∫•u h√¨nh n·∫±m t·∫°i: /home/n8n"
echo "üìÅ File .env, docker-compose.yml v√† Caddyfile ƒë√£ ƒë∆∞·ª£c t·∫°o"
echo ""
